{"version":3,"sources":["PopoverButton.js","PopoverButtonHOC.js","util.js","AddContents.js","AddRules.js","Sidebar.js","FreezeButton.js","Viewport.js","examples.js","App.js","serviceWorker.js","index.js"],"names":["PopoverButton","name","displayPopover","isPopoverActive","activeButton","hidePopover","content","children","injectCallback","isSelected","classes","toClone","cloned","React","cloneElement","onFinished","className","onClick","e","stopPropagation","PopoverButtonHOC","timeout","ms","Promise","res","setTimeout","setSlidingOut","setIsPopoverActive","setActiveButton","pruneRules","a","target","currentTarget","setPopoverContent","AddContents","contents","setRules","index","isDeleteable","useState","state","setState","handleChange","i","v","value","old","mod","handleDeleteContent","filter","_","j","useEffect","id","onSubmit","preventDefault","map","key","type","onChange","push","form","AddRules","rules","ruleName","setRuleName","inputRef","useRef","current","focus","htmlFor","ref","find","r","Sidebar","PopoverButtonWrapper","originRule","setOriginRule","rule","FreezeButton","isFrozen","setIsFrozen","text","Viewport","slidingOut","popoverContent","traceryOutput","setTraceryOutput","inGrammar","reduce","acc","curr","grammar","tracery","createGrammar","addModifiers","baseEngModifiers","flatten","split","popoverClass","href","loadChicken","loadAdvanced","line","App","o","util","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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C,iBACFsB,EAAc,CACZ,CACE5E,KAAM,SACNkC,SAAU,CACR,0CACA,uCACA,2CAINC,EAAS,CACP,CAAEnC,KAAM,aAAckC,SAAU,CAAC,iBACjC,CAAElC,KAAM,YAAakC,SAAU,CAAC,kBAAmB,kBACnD,CAAElC,KAAM,YAAakC,SAAU,CAAC,eAAgB,0BDyDdkE,CAAYnF,EAAG2D,EAAezC,KAA1D,cAFF,IAME,6BANF,qCAOqC,IACnC,uBAAGgE,KAAK,IAAInF,QAAS,SAACC,GAAD,OC1DV,SAACA,EAAG2D,EAAezC,GACtClB,EAAEqC,iBACFsB,EAAc,CACZ,CACE5E,KAAM,SACNkC,SAAU,CAAC,gDAGfC,EAAS,CACP,CACEnC,KAAM,OACNkC,SAAU,CACR,QACA,QACA,QACA,MACA,SACA,OACA,OACA,SAGJ,CACElC,KAAM,SACNkC,SAAU,CACR,UACA,QACA,UACA,WACA,SACA,QACA,MACA,SACA,QACA,OACA,WAGJ,CACElC,KAAM,iBACNkC,SAAU,CACR,SACA,QACA,YACA,YACA,WACA,SACA,aACA,MACA,SACA,YACA,UACA,WAGJ,CACElC,KAAM,gBACNkC,SAAU,CACR,UACA,SACA,gBACA,aACA,UACA,QACA,QACA,QACA,SACA,UAGJ,CACElC,KAAM,UACNkC,SAAU,CAAC,aAAc,aAAc,aAAc,UAAW,UAElE,CAAElC,KAAM,OAAQkC,SAAU,CAAC,QAAS,OAAQ,OAAQ,WACpD,CAAElC,KAAM,aAAckC,SAAU,CAAC,oCACjC,CACElC,KAAM,OACNkC,SAAU,CACR,QACA,YACA,cACA,UACA,SACA,cAGJ,CACElC,KAAM,cACNkC,SAAU,CACR,qEACA,+DACA,+DAGJ,CACElC,KAAM,UACNkC,SAAU,CACR,yBACA,wBACA,wBACA,qCAGJ,CACElC,KAAM,eACNkC,SAAU,CAAC,uDAEb,CACElC,KAAM,WACNkC,SAAU,CACR,oHACA,oBACA,4GAGJ,CACElC,KAAM,QACNkC,SAAU,CAAC,iDD5DqBmE,CAAapF,EAAG2D,EAAezC,KAA3D,cARF,KAaA,yBAAKiB,GAAG,qBACN,yBAAKA,GAAG,oBACLiC,EAAc9B,KAAI,SAAC+C,EAAM5D,GAAP,OACjB,0BAAMc,IAAKd,GACR4D,EACD,iCAGJ,yBAAKlD,GAAG,iBACN,kBAAC,EAAD,CAAc2B,SAAUA,EAAUC,YAAaA,IAC/C,4BAAQvB,KAAK,SAASzC,QAAS,kBAAMmB,GAAS,SAACU,GAAD,mBAAaA,QAA3D,kBEJC0D,EAnFH,WAAM,MAE8B3F,IAAM0B,UAAS,GAF7C,mBAETpC,EAFS,KAEQwB,EAFR,OAK4Bd,IAAM0B,SAAS,MAL3C,mBAKT8C,EALS,KAKOpD,EALP,OAQwBpB,IAAM0B,SAAS,IARvC,mBAQTnC,EARS,KAQKwB,EARL,OAWoBf,IAAM0B,UAAS,GAXnC,mBAWT6C,EAXS,KAWG1D,EAXH,OAeoBb,IAAM0B,SAAS,CACjD,CACEtC,KAAM,SACNkC,SAAU,CAAC,2CAlBC,mBAeTyC,EAfS,KAeGC,EAfH,OAuBUhE,IAAM0B,SAAS,IAvBzB,mBAuBTwB,EAvBS,KAuBF3B,EAvBE,KA0BVP,EAAa,kBP3BF,SAACO,GAClBA,GAAS,SAACU,GACR,OAAOA,EAAIG,QAAO,SAACwD,GAAD,MAAkB,KAAXA,EAAExG,WOyBJyG,CAAgBtE,IAGnC/B,EAAW,uCAAG,WAAOa,GAAP,SAAAY,EAAA,sEACZ4E,EACJxF,EACAQ,EACAC,EACAC,EACAC,GANgB,mFAAH,sDAsBX8C,EAAuBvD,EAAiB,CAC5ClB,eAbkB,uCAAG,WAAOD,EAAMK,GAAb,SAAAwB,EAAA,sEACf4E,EACJzG,EACAK,EACAH,EACAE,EACA4B,EACAN,EACAC,GARmB,mFAAH,wDAclBzB,gBAAiBA,EACjBC,aAAcA,EACdC,YAAaA,IAGf,OACE,yBAAKW,UAAU,OACb,kBAAC,EAAD,CACEX,YAAaA,EACbsE,qBAAsBA,EACtBC,WAAYA,EACZC,cAAeA,EACfd,MAAOA,EACP3B,SAAUA,IAGZ,kBAAC,EAAD,CACEgD,WAAYA,EACZjF,gBAAiBA,EACjBE,YAAaA,EACbgF,eAAgBA,EAChBtB,MAAOA,EACP3B,SAAUA,EACVwC,WAAYA,EACZC,cAAeA,MCxEH8B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.7528ba30.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\nimport PropTypes from \"prop-types\";\n\n// A button that manages displaying content in the popover\nconst PopoverButton = ({\n  name,\n  displayPopover,\n  isPopoverActive,\n  activeButton,\n  hidePopover,\n  content,\n  children,\n  injectCallback,\n}) => {\n  const isSelected = isPopoverActive && activeButton === name;\n  const selectedClass = isSelected ? \"selectedButton\" : \"unselectedButton\";\n  const classes = `ruleButton ${selectedClass}`;\n\n  // If there is content to display, clone it and inject a callback that closes\n  // the popover\n  const toClone = content || children;\n  var cloned = null;\n  if (toClone && injectCallback) {\n    cloned = React.cloneElement(toClone, { onFinished: hidePopover });\n  }\n\n  return (\n    <div className=\"ruleButtonDiv\">\n      <button\n        onClick={(e) => {\n          e.stopPropagation();\n          if (isSelected) {\n            hidePopover(e);\n          } else {\n            if (isPopoverActive) hidePopover();\n            displayPopover(name, cloned || toClone || \"\");\n          }\n        }}\n        className={classes}\n      >\n        {name}\n      </button>\n    </div>\n  );\n};\n\nPopoverButton.propTypes = {\n  name: PropTypes.string.isRequired,\n  displayPopover: PropTypes.func.isRequired,\n  isPopoverActive: PropTypes.bool.isRequired,\n  activeButton: PropTypes.string.isRequired,\n  hidePopover: PropTypes.func.isRequired,\n  content: PropTypes.node,\n  children: PropTypes.node,\n  injectCallback: PropTypes.bool,\n};\n\nexport default PopoverButton;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport PopoverButton from \"./PopoverButton.js\";\n\n// This function binds some common variables used in every PopoverButton so\n// only necessary properties are passed in in the JSX\nfunction PopoverButtonHOC({\n  displayPopover,\n  isPopoverActive,\n  activeButton,\n  hidePopover,\n}) {\n  const Wrapper = ({ name, content, children, injectCallback }) => {\n    return (\n      <PopoverButton\n        name={name}\n        displayPopover={displayPopover}\n        isPopoverActive={isPopoverActive}\n        activeButton={activeButton}\n        hidePopover={hidePopover}\n        content={content}\n        injectCallback={injectCallback}\n      >\n        {children}\n      </PopoverButton>\n    );\n  };\n  Wrapper.propTypes = {\n    name: PropTypes.string.isRequired,\n    content: PropTypes.node,\n    children: PropTypes.node,\n    injectCallback: PropTypes.bool,\n  };\n  return Wrapper;\n}\nPopoverButtonHOC.propTypes = {\n  displayPopover: PropTypes.func.isRequired,\n  isPopoverActive: PropTypes.bool.isRequired,\n  activeButton: PropTypes.string.isRequired,\n  hidePopover: PropTypes.func.isRequired,\n};\n\nexport default PopoverButtonHOC;\n","// Use to wait for popover close animation to finish\nfunction timeout(ms) {\n  return new Promise((res) => setTimeout(res, ms));\n}\n\n// Trims rules with empty names from the rules list\nconst pruneRules = (setRules) => {\n  setRules((old) => {\n    return old.filter((o) => o.name !== \"\");\n  });\n};\n\n// Hides the popover\nconst hidePopover = async (\n  e,\n  setSlidingOut,\n  setIsPopoverActive,\n  setActiveButton,\n  pruneRules\n) => {\n  if (!e || e.target === e.currentTarget) {\n    setSlidingOut(true);\n    await timeout(201);\n    setIsPopoverActive(false);\n    setSlidingOut(false);\n    setActiveButton(\"\");\n    pruneRules();\n  }\n};\n\n// Displays the popover using the given button id and content\nconst displayPopover = async (\n  name,\n  content,\n  isPopoverActive,\n  hidePopover,\n  setPopoverContent,\n  setIsPopoverActive,\n  setActiveButton\n) => {\n  if (isPopoverActive) await hidePopover();\n  setPopoverContent(content);\n  setIsPopoverActive(true);\n  setActiveButton(name);\n};\n\nexport { displayPopover, hidePopover, pruneRules };\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport TextareaAutosize from \"react-textarea-autosize\";\n\nconst AddContents = ({\n  contents,\n  setRules,\n  onFinished,\n  index,\n  isDeleteable,\n}) => {\n  // Manages the list of content choices associated with a rule\n  const [state, setState] = React.useState(contents);\n\n  // Handles the change events for input box number i\n  const handleChange = (i) => {\n    return (e) => {\n      const v = e.target.value;\n      // Update the corresponding element in the state array\n      setState((old) => {\n        const mod = [...old];\n        mod[i] = v;\n        return mod;\n      });\n    };\n  };\n\n  // Handles the deletion of content choice number i\n  const handleDeleteContent = (i) => {\n    return () => {\n      setState((old) => {\n        return old.filter((_, j) => i !== j);\n      });\n    };\n  };\n\n  // Handles the deletion of the entire rule\n  const handleDeleteRule = () => {\n    setRules((old) => {\n      return old.filter((_, i) => i !== index);\n    });\n    onFinished();\n  };\n\n  // Handles adding a new content choice to the rule\n  const handleAdd = () => {\n    setState((old) => {\n      const mod = [...old];\n      mod.push(\"\");\n      return mod;\n    });\n  };\n\n  // When the state changes, update the corresponding rule in the global rules\n  React.useEffect(() => {\n    setRules((old) => {\n      const mod = [...old];\n      mod[index] = { name: old[index].name, contents: state };\n      return mod;\n    });\n  }, [state, index, setRules]);\n\n  // When the form is submitted, close the popover\n  const handleSubmit = (e) => {\n    if (onFinished) onFinished();\n    e.preventDefault();\n  };\n\n  return (\n    <div id=\"AddContentsPopover\" className=\"AddPopover\">\n      <h2>Add Contents</h2>\n      <p>\n        Click the button below to add a content choice to the list of contents,\n        or edit an existing content choice using the input fields.\n      </p>\n      <form id=\"addContentsForm\" onSubmit={handleSubmit}>\n        {state.map((content, i) => (\n          <div className=\"contentRow\" key={i}>\n            <TextareaAutosize\n              type=\"text\"\n              value={state[i]}\n              onChange={handleChange(i)}\n              className=\"addInput\"\n            />\n            <button type=\"button\" onClick={handleDeleteContent(i)}>\n              Delete\n            </button>\n          </div>\n        ))}\n        <div id=\"bottomButtons\">\n          <button type=\"button\" onClick={handleAdd}>\n            Add content choice\n          </button>\n          {isDeleteable ? (\n            <button type=\"button\" onClick={handleDeleteRule}>\n              Delete rule\n            </button>\n          ) : null}\n          <button type=\"submit\" form=\"addContentsForm\">\n            Finished\n          </button>\n        </div>\n      </form>\n    </div>\n  );\n};\n\nAddContents.propTypes = {\n  contents: PropTypes.arrayOf(PropTypes.string).isRequired,\n  setRules: PropTypes.func.isRequired,\n  onFinished: PropTypes.func,\n  index: PropTypes.number,\n  isDeleteable: PropTypes.bool.isRequired,\n};\n\nexport default AddContents;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst AddRules = ({ rules, setRules, onFinished }) => {\n  // Manages the rule name being added\n  const [ruleName, setRuleName] = React.useState(\"\");\n\n  const handleRuleInEditChange = (e) => {\n    const v = e.target.value;\n    // This conditional block prevents rule name clashes\n    if (!rules.find((r) => r.name === v)) {\n      // If the current rule name is unique, set it in the global rules...\n      const mod = [...rules];\n      mod.push({ name: v, contents: [] });\n      setRules(mod);\n    } else {\n      // ... otherwise, use the existing rules unchanged\n      setRules(rules);\n    }\n    setRuleName(v);\n  };\n\n  // When the form is submitted, close the popover\n  const handleSubmit = (e) => {\n    if (onFinished) onFinished();\n    e.preventDefault();\n  };\n\n  // Focus the input box on load\n  const inputRef = React.useRef(null);\n  React.useEffect(() => {\n    inputRef.current.focus();\n  }, []);\n\n  return (\n    <div id=\"AddRulesPopover\" className=\"AddPopover\">\n      <h2>Add Rules</h2>\n      <p>\n        Enter a rule name below to create a new Tracery rule. The rule can then\n        be reference using the format <code>#ruleName#</code>\n      </p>\n      <form id=\"addRuleForm\" onSubmit={handleSubmit}>\n        <label htmlFor=\"ruleInput\">Rule name:</label>\n        <input\n          id=\"ruleInput\"\n          ref={inputRef}\n          type=\"text\"\n          value={ruleName}\n          onChange={handleRuleInEditChange}\n          className=\"addInput\"\n        />\n      </form>\n      <div id=\"bottomButtons\">\n        <button type=\"submit\" form=\"addRuleForm\">\n          Finished\n        </button>\n      </div>\n    </div>\n  );\n};\n\nAddRules.propTypes = {\n  rules: PropTypes.arrayOf(PropTypes.object).isRequired,\n  setRules: PropTypes.func.isRequired,\n  onFinished: PropTypes.func,\n};\n\nexport default AddRules;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport AddContents from \"./AddContents.js\";\nimport AddRules from \"./AddRules.js\";\n\nconst Sidebar = ({\n  hidePopover,\n  PopoverButtonWrapper,\n  originRule,\n  setOriginRule,\n  rules,\n  setRules,\n}) => {\n  return (\n    <div id=\"sidebar\" onClick={(e) => hidePopover(e)}>\n      <div id=\"dynamicContent\">\n        <PopoverButtonWrapper name={originRule[0].name} injectCallback={true}>\n          <AddContents\n            contents={originRule[0].contents}\n            setRules={setOriginRule}\n            index={0}\n            isDeleteable={false}\n          />\n        </PopoverButtonWrapper>\n        {rules.map((rule, i) => (\n          <PopoverButtonWrapper key={i} name={rule.name} injectCallback={true}>\n            <AddContents\n              contents={rule.contents}\n              setRules={setRules}\n              index={i}\n              isDeleteable={true}\n            />\n          </PopoverButtonWrapper>\n        ))}\n      </div>\n      <div id=\"staticContent\">\n        <div className=\"ruleButtonDiv\">\n          <button\n            type=\"button\"\n            className=\"ruleButton unselectedButton\"\n            onClick={() => {\n              setOriginRule([\n                {\n                  name: \"origin\",\n                  contents: [\"Start editing rules to generate text\"],\n                },\n              ]);\n              setRules([]);\n              hidePopover();\n            }}\n          >\n            Clear Rules\n          </button>\n        </div>\n        <PopoverButtonWrapper name=\"Add Rule\" injectCallback={true}>\n          <AddRules rules={rules} setRules={setRules} />\n        </PopoverButtonWrapper>\n      </div>\n    </div>\n  );\n};\nSidebar.propTypes = {\n  hidePopover: PropTypes.func.isRequired,\n  PopoverButtonWrapper: PropTypes.func.isRequired,\n  originRule: PropTypes.arrayOf(PropTypes.object).isRequired,\n  setOriginRule: PropTypes.func.isRequired,\n  rules: PropTypes.arrayOf(PropTypes.object).isRequired,\n  setRules: PropTypes.func.isRequired,\n};\n\nexport default Sidebar;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst FreezeButton = ({ isFrozen, setIsFrozen }) => {\n  const toggle = () => setIsFrozen(!isFrozen);\n  const text = isFrozen ? \"Unfreeze\" : \"Freeze\";\n  return (\n    <button type=\"button\" onClick={toggle}>\n      {text}\n    </button>\n  );\n};\nFreezeButton.propTypes = {\n  isFrozen: PropTypes.bool.isRequired,\n  setIsFrozen: PropTypes.func.isRequired,\n};\n\nexport default FreezeButton;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { loadChicken, loadAdvanced } from \"./examples.js\";\nimport FreezeButton from \"./FreezeButton.js\";\nimport tracery from \"tracery-grammar\";\n\nconst Viewport = ({\n  slidingOut,\n  isPopoverActive,\n  hidePopover,\n  popoverContent,\n  rules,\n  setRules,\n  originRule,\n  setOriginRule,\n}) => {\n  // Manages the frozen/unfrozen state of text generation in the viewport\n  const [isFrozen, setIsFrozen] = React.useState(false);\n\n  // Manages the generated text shown in the viewport\n  const [traceryOutput, setTraceryOutput] = React.useState([]);\n\n  // If rules, originRule, or isFrozen change, generate a new tracery output, if\n  // not currently frozen\n  React.useEffect(() => {\n    if (!isFrozen) {\n      // Convert from internal format to JSON format expected by tracery\n      const inGrammar = rules.reduce((acc, curr) => {\n        acc[curr.name] = curr.contents;\n        return acc;\n      }, {});\n      inGrammar[\"origin\"] = originRule[0].contents;\n\n      // Create the tracery grammar\n      var grammar = tracery.createGrammar(inGrammar);\n\n      // Add the base English modifiers\n      grammar.addModifiers(tracery.baseEngModifiers);\n\n      // Generate the text and split on newlines so the rendering code can\n      // easily insert line breaks\n      setTraceryOutput(grammar.flatten(\"#origin#\").split(\"\\n\"));\n    }\n  }, [rules, originRule, isFrozen]);\n\n  // Set the popover's className based on whether it's currently sliding out\n  const popoverClass = slidingOut ? \"slide-out\" : \"slide-in\";\n\n  return (\n    <div id=\"viewport\" onClick={(e) => hidePopover(e)}>\n      {isPopoverActive ? (\n        <div id=\"popover\" className={popoverClass}>\n          {popoverContent}\n        </div>\n      ) : null}\n      <div id=\"viewport-contents\">\n        <h2>Tracery Builder</h2>\n        <p>\n          This is a react app that can be used to build grammars for Kate\n          Compton&apos;s{\" \"}\n          <a href=\"https://github.com/galaxykate/tracery\">Tracery language</a>.\n          The origin rule is always the starting point and cannot be deleted.\n          Additional rules can be added using the Add Rule button at the bottom\n          of the sidebar. Clicking a rule in the sidebar will allow you to edit\n          or delete the rule.\n        </p>\n        <p>\n          To generate a new expansion, click Generate. To prevent the current\n          expansion from being overwritten, click the Freeze button. Click it\n          again to resume generating expansions.\n        </p>\n        <p>\n          To load a simple example grammar:{\" \"}\n          <a href=\"#\" onClick={(e) => loadChicken(e, setOriginRule, setRules)}>\n            click here\n          </a>\n          .\n          <br />\n          To load a complex example grammar:{\" \"}\n          <a href=\"#\" onClick={(e) => loadAdvanced(e, setOriginRule, setRules)}>\n            click here\n          </a>\n          .\n        </p>\n        <div id=\"tracery-container\">\n          <div id=\"tracery-contents\">\n            {traceryOutput.map((line, i) => (\n              <span key={i}>\n                {line}\n                <br />\n              </span>\n            ))}\n            <div id=\"bottomButtons\">\n              <FreezeButton isFrozen={isFrozen} setIsFrozen={setIsFrozen} />\n              <button type=\"button\" onClick={() => setRules((old) => [...old])}>\n                Generate\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\nViewport.propTypes = {\n  slidingOut: PropTypes.bool.isRequired,\n  isPopoverActive: PropTypes.bool.isRequired,\n  hidePopover: PropTypes.func.isRequired,\n  popoverContent: PropTypes.node,\n  setRules: PropTypes.func.isRequired,\n  setOriginRule: PropTypes.func.isRequired,\n  originRule: PropTypes.arrayOf(PropTypes.object).isRequired,\n  rules: PropTypes.arrayOf(PropTypes.object).isRequired,\n};\n\nexport default Viewport;\n","// Loads the basic tracery example into the app\nconst loadChicken = (e, setOriginRule, setRules) => {\n  e.preventDefault();\n  setOriginRule([\n    {\n      name: \"origin\",\n      contents: [\n        '\"Guess what?\"\\n\"What?\"\\n\"#Guess What#.\"',\n        '\"Guess why?\"\\n\"Why?\"\\n\"#Guess Why#.\"',\n        '\"Guess who?\"\\n\"Who?\"\\n\"#Guess Who#.\"',\n      ],\n    },\n  ]);\n  setRules([\n    { name: \"Guess What\", contents: [\"Chicken Butt\"] },\n    { name: \"Guess Why\", contents: [\"Chicken Pot Pie\", \"Chicken Thigh\"] },\n    { name: \"Guess Who\", contents: [\"Chicken Stew\", \"Chicken Cordon Bleu\"] },\n  ]);\n};\n\n// Loads the advanced example from the tracery tutorial into the app\nconst loadAdvanced = (e, setOriginRule, setRules) => {\n  e.preventDefault();\n  setOriginRule([\n    {\n      name: \"origin\",\n      contents: [\"Once upon a time, #[#setCharacter#]story#\"],\n    },\n  ]);\n  setRules([\n    {\n      name: \"name\",\n      contents: [\n        \"Arjun\",\n        \"Yuuma\",\n        \"Darcy\",\n        \"Mia\",\n        \"Chiaki\",\n        \"Izzi\",\n        \"Azra\",\n        \"Lina\",\n      ],\n    },\n    {\n      name: \"animal\",\n      contents: [\n        \"unicorn\",\n        \"raven\",\n        \"sparrow\",\n        \"scorpion\",\n        \"coyote\",\n        \"eagle\",\n        \"owl\",\n        \"lizard\",\n        \"zebra\",\n        \"duck\",\n        \"kitten\",\n      ],\n    },\n    {\n      name: \"occupationBase\",\n      contents: [\n        \"wizard\",\n        \"witch\",\n        \"detective\",\n        \"ballerina\",\n        \"criminal\",\n        \"pirate\",\n        \"lumberjack\",\n        \"spy\",\n        \"doctor\",\n        \"scientist\",\n        \"captain\",\n        \"priest\",\n      ],\n    },\n    {\n      name: \"occupationMod\",\n      contents: [\n        \"occult \",\n        \"space \",\n        \"professional \",\n        \"gentleman \",\n        \"erotic \",\n        \"time \",\n        \"cyber\",\n        \"paleo\",\n        \"techno\",\n        \"super\",\n      ],\n    },\n    {\n      name: \"strange\",\n      contents: [\"mysterious\", \"portentous\", \"enchanting\", \"strange\", \"eerie\"],\n    },\n    { name: \"tale\", contents: [\"story\", \"saga\", \"tale\", \"legend\"] },\n    { name: \"occupation\", contents: [\"#occupationMod##occupationBase#\"] },\n    {\n      name: \"mood\",\n      contents: [\n        \"vexed\",\n        \"indignant\",\n        \"impassioned\",\n        \"wistful\",\n        \"astute\",\n        \"courteous\",\n      ],\n    },\n    {\n      name: \"setPronouns\",\n      contents: [\n        \"[heroThey:they][heroThem:them][heroTheir:their][heroTheirs:theirs]\",\n        \"[heroThey:she][heroThem:her][heroTheir:her][heroTheirs:hers]\",\n        \"[heroThey:he][heroThem:him][heroTheir:his][heroTheirs:his]\",\n      ],\n    },\n    {\n      name: \"setSail\",\n      contents: [\n        \"set sail for adventure\",\n        \"left #heroTheir# home\",\n        \"set out for adventure\",\n        \"went to seek #heroTheir# forture\",\n      ],\n    },\n    {\n      name: \"setCharacter\",\n      contents: [\"[#setPronouns#][hero:#name#][heroJob:#occupation#]\"],\n    },\n    {\n      name: \"openBook\",\n      contents: [\n        \"An old #occupation# told #hero# a story. 'Listen well' she said to #hero#, 'to this #strange# #tale#. ' #origin#'\",\n        \"#hero# went home.\",\n        \"#hero# found an ancient book and opened it.  As #hero# read, the book told #strange.a# #tale#: #origin#\",\n      ],\n    },\n    {\n      name: \"story\",\n      contents: [\"#hero# the #heroJob# #setSail#. #openBook#\"],\n    },\n  ]);\n};\n\nexport { loadChicken, loadAdvanced };\n","import React from \"react\";\nimport \"./App.css\";\nimport PopoverButtonHOC from \"./PopoverButtonHOC.js\";\nimport * as util from \"./util.js\";\nimport Sidebar from \"./Sidebar.js\";\nimport Viewport from \"./Viewport.js\";\n\nconst App = () => {\n  // Manages whether the popover is being displayed\n  const [isPopoverActive, setIsPopoverActive] = React.useState(false);\n\n  // Manages the content of the popover\n  const [popoverContent, setPopoverContent] = React.useState(null);\n\n  // Manages the id of the button that activated the popover, if active\n  const [activeButton, setActiveButton] = React.useState(\"\");\n\n  // Tracks if the popover is currently in its closing animation\n  const [slidingOut, setSlidingOut] = React.useState(false);\n\n  // Manages the top level tracery rule. Stored as an array for ease of interop\n  // with things that handle `rules`\n  const [originRule, setOriginRule] = React.useState([\n    {\n      name: \"origin\",\n      contents: [\"Start editing rules to generate text\"],\n    },\n  ]);\n\n  // Manages all non-origin tracery rules\n  const [rules, setRules] = React.useState([]);\n\n  // Prunes empty rules\n  const pruneRules = () => util.pruneRules(setRules);\n\n  // Hides the popover\n  const hidePopover = async (e) =>\n    await util.hidePopover(\n      e,\n      setSlidingOut,\n      setIsPopoverActive,\n      setActiveButton,\n      pruneRules\n    );\n\n  // Displays the popover\n  const displayPopover = async (name, content) =>\n    await util.displayPopover(\n      name,\n      content,\n      isPopoverActive,\n      hidePopover,\n      setPopoverContent,\n      setIsPopoverActive,\n      setActiveButton\n    );\n\n  // Bind common values of the PopoverButtonHOC\n  const PopoverButtonWrapper = PopoverButtonHOC({\n    displayPopover: displayPopover,\n    isPopoverActive: isPopoverActive,\n    activeButton: activeButton,\n    hidePopover: hidePopover,\n  });\n\n  return (\n    <div className=\"App\">\n      <Sidebar\n        hidePopover={hidePopover}\n        PopoverButtonWrapper={PopoverButtonWrapper}\n        originRule={originRule}\n        setOriginRule={setOriginRule}\n        rules={rules}\n        setRules={setRules}\n      />\n\n      <Viewport\n        slidingOut={slidingOut}\n        isPopoverActive={isPopoverActive}\n        hidePopover={hidePopover}\n        popoverContent={popoverContent}\n        rules={rules}\n        setRules={setRules}\n        originRule={originRule}\n        setOriginRule={setOriginRule}\n      />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}